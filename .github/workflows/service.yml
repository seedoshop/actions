name: Go

on:
  workflow_call:
    inputs:
      go_version:
        required: false
        type: string
        default: "1.20"
      service_main_file:
        required: false
        type: string
        default: "cmd/server/main.go"
      sqlc:
        required: false
        type: boolean
      test_functional_enabled:
        required: false
        type: string
        default: "true"
      test_functional_wait:
        required: false
        type: string
        default: "10s"
    secrets:
      PRIVATE_GITHUB_USER:
        required: false
      PRIVATE_GITHUB_TOKEN:
        required: false

jobs:
  get-dependencies:
    name: Get dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{inputs.go_version}}
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Granting private modules access
        env:
          USER: ${{ secrets.PRIVATE_GITHUB_USER }}
          TOKEN: ${{ secrets.PRIVATE_GITHUB_TOKEN }}
        run: |
          echo "machine github.com login ${USER} ${TOKEN} APIKEY" >> $HOME/.netrc
          git config --global url."https://${USER}:${TOKEN}@github.com".insteadOf "https://github.com"

      - name: Get dependencies
        env:
          GOPRIVATE: github.com/seedoshop,github.com/setare
        run: |
          make mod

      - name: Save dependency cache
        uses: actions/cache@v3
        id: cache
        with:
          path: ./vendor
          key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}

  check-generation:
    name: Check generation
    runs-on: ubuntu-latest
    needs:
      - get-dependencies
    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{inputs.go_version}}
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Restore dependency cache
        uses: actions/cache/restore@v3
        id: cache
        with:
          path: ./vendor
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Go generate
        run: |
          make generate

      - name: Check if mocks are updated
        uses: setare/git-changes-action@v0.1.4
        with:
          github_token: ${{ github.token }}

  check-build:
    name: Check build
    runs-on: ubuntu-latest
    needs:
      - get-dependencies
    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{inputs.go_version}}
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Restore dependency cache
        uses: actions/cache/restore@v3
        id: cache
        with:
          path: ./vendor
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Check if CMD is buildable
        run: |
          go build ${{ inputs.service_main_file }}

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs:
      - get-dependencies
    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{inputs.go_version}}
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Restore dependency cache
        uses: actions/cache/restore@v3
        id: cache
        with:
          path: ./vendor
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Run golangci-lint
        run: |
          make lint

  security:
    name: Security checks
    runs-on: ubuntu-latest
    needs:
      - get-dependencies
    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{inputs.go_version}}
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Restore dependency cache
        uses: actions/cache/restore@v3
        id: cache
        with:
          path: ./vendor
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Get dependencies
        run: |
          make sec

  unit-tests:
    name: Unit tests
    runs-on: ubuntu-latest
    needs:
      - lint
      - security
    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{inputs.go_version}}
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Restore dependency cache
        uses: actions/cache/restore@v3
        id: cache
        with:
          path: ./vendor
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Unit tests
        run: |
          go test -race -covermode=atomic -coverprofile=coverage.out ./...

  functional-tests:
    name: Functional tests
    runs-on: ubuntu-latest
    needs:
      - unit-tests
    if: ${{ inputs.test_functional_enabled == 'true' }}
    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{inputs.go_version}}
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Restore dependency cache
        uses: actions/cache/restore@v3
        id: cache
        with:
          path: ./vendor
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Build image
        run: |
          make docker-build

      - name: Start docker dependencies
        run: |
          make functional-test-up

      - name: Wait service to initialize
        uses: juliangruber/sleep-action@v1
        with:
          time: ${{ inputs.test_functional_wait }}

      - name: Run functional tests
        run: |
          make functional-test-run

      - name: Docker logs
        if: ${{ failure() }}
        run: |
          docker-compose -f test/docker-compose.yaml logs

      - name: Stop docker dependencies
        if: ${{ always() }}
        run: |
          make functional-test-down